//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyAirport.Data.ModelEntityFramework
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MyAirportEntities : DbContext
    {
        public MyAirportEntities()
            : base("name=MyAirportEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AEROPORT> AEROPORTs { get; set; }
        public virtual DbSet<ASSOC_CS_CLA> ASSOC_CS_CLA { get; set; }
        public virtual DbSet<ASSOC_EMP_CLA> ASSOC_EMP_CLA { get; set; }
        public virtual DbSet<BAGAGE> BAGAGEs { get; set; }
        public virtual DbSet<BAGAGE_OCCURENCE> BAGAGE_OCCURENCE { get; set; }
        public virtual DbSet<BAGAGE_PARTICULARITE> BAGAGE_PARTICULARITE { get; set; }
        public virtual DbSet<BAGAGE_TRACE> BAGAGE_TRACE { get; set; }
        public virtual DbSet<BAGAGE_VOL_APPORT> BAGAGE_VOL_APPORT { get; set; }
        public virtual DbSet<BAGAGE_VOL_CNT> BAGAGE_VOL_CNT { get; set; }
        public virtual DbSet<COMPAGNIE> COMPAGNIEs { get; set; }
        public virtual DbSet<COMPAGNIE_CLASSE> COMPAGNIE_CLASSE { get; set; }
        public virtual DbSet<CRI_SELECTION> CRI_SELECTION { get; set; }
        public virtual DbSet<EMPORT> EMPORTs { get; set; }
        public virtual DbSet<GROUP_TRI> GROUP_TRI { get; set; }
        public virtual DbSet<MODEL_CHRONOGRAMME> MODEL_CHRONOGRAMME { get; set; }
        public virtual DbSet<MODEL_CLASSEMENT> MODEL_CLASSEMENT { get; set; }
        public virtual DbSet<MODEL_SATISFACTION> MODEL_SATISFACTION { get; set; }
        public virtual DbSet<PARK_AVION> PARK_AVION { get; set; }
        public virtual DbSet<RESSOURCE_GROUP> RESSOURCE_GROUP { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TACHE_CODE_ALARME> TACHE_CODE_ALARME { get; set; }
        public virtual DbSet<TACHE_ENTREE_TRI> TACHE_ENTREE_TRI { get; set; }
        public virtual DbSet<TACHE_GLOB> TACHE_GLOB { get; set; }
        public virtual DbSet<TACHE_GRP_BAGS> TACHE_GRP_BAGS { get; set; }
        public virtual DbSet<TACHE_SEC_ROUT> TACHE_SEC_ROUT { get; set; }
        public virtual DbSet<VOL> VOLs { get; set; }
        public virtual DbSet<VOL_ARRIVE> VOL_ARRIVE { get; set; }
        public virtual DbSet<VOL_DEPART> VOL_DEPART { get; set; }
        public virtual DbSet<VOL_ENRGT_SUR> VOL_ENRGT_SUR { get; set; }
        public virtual DbSet<VOL_ITINERAIRE> VOL_ITINERAIRE { get; set; }
        public virtual DbSet<VOL_TYP_AVION> VOL_TYP_AVION { get; set; }
        public virtual DbSet<RESSOURCE> RESSOURCEs { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
